// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  author      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
  dislikes    Dislike[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  bookId    Int
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  likes     Like[]
  dislikes  Dislike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  bookId    Int?
  book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dislike {
  id        Int      @id @default(autoincrement())
  bookId    Int?
  book      Book?    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  books     Book[]
  comments  Comment[]
  likes     Like[]
  dislikes  Dislike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPERADMIN
}
